from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.engine import session_maker
from database.models import DFloodKrudor

import pandas as pd
from utils import decline_phrase, split_message



async def check_news(callback: CallbackQuery, session: AsyncSession, dialog_manager: DialogManager):
    async with session_maker() as session_:
    
        query = select(DFloodKrudor.municipality, DFloodKrudor.date_event, DFloodKrudor.type_flood, DFloodKrudor.road, DFloodKrudor.f_location, DFloodKrudor.f_road_l,
                       DFloodKrudor.f_road_q, DFloodKrudor.f_water_level, DFloodKrudor.f_closing_date, DFloodKrudor.f_opening_date, DFloodKrudor.oper_mode,
                       DFloodKrudor.f_detour)
        response = await session_.execute(query)
        flood_districts = response.all()
        
        df = pd.DataFrame(flood_districts)
        
        response = ''
        df['danger_icon'] = df.apply(lambda row: 'üî¥' if row['oper_mode'] in ('–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è', '–†–µ–∂–∏–º –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏') else 'üü¢', axis=1)
        df['date_event'] = df['date_event'].apply(lambda x: x.strftime('%d.%m.%Y') if pd.notnull(x) else x)
        df['f_closing_date'] = df['f_closing_date'].apply(lambda x: x.strftime('%d.%m.%Y') if pd.notnull(x) else x)
        df['f_opening_date'] = df['f_opening_date'].apply(lambda x: x.strftime('%d.%m.%Y') if pd.notnull(x) else x)
        
        for i in df.iterrows():
            declined_roads = await decline_phrase(int(i[1]['f_road_q']))
            
            response += f"{i[1]['danger_icon']} {i[1]['municipality']} " + \
                        f"{i[1]['date_event']}.\n"
            if i[1]['danger_icon'] == 'üî¥':
                response += "–ü–ï–†–ï–õ–ò–í –î–û–†–û–ì–ò. "

            response += f"{i[1]['type_flood']} \n" +\
            f"–ê/–î: {i[1]['road']}. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i[1]['f_location']}\n" + \
            f"–û–±—â–∞—è –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å: {i[1]['f_road_l']} –º –Ω–∞ {declined_roads} \n" + \
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –Ω–∞–¥ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç—å—é: {i[1]['f_water_level']} —Å–º\n" + \
            f"–î–æ—Ä–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å {i[1]['f_closing_date']}\n"
            if i[1]['f_detour'] == '–î–∞':
                response += "–ï—Å—Ç—å –æ–±—ä–µ–∑–¥–Ω–∞—è –¥–æ—Ä–æ–≥–∞\n"
            else:
                response += "–ù–µ—Ç –æ–±—ä–µ–∑–¥–Ω–æ–π –¥–æ—Ä–æ–≥–∏\n"
            
            response += f"{i[1]['oper_mode']}. "
            if i[1]['danger_icon'] == 'üü¢':
                response += "–ù–ï–¢ –£–ì–†–û–ó–´\n\n"
            else:
                response += "\n\n"
    msg_parts = await split_message(response)
    for msg_part in msg_parts:
        await callback.message.answer(text=msg_part)